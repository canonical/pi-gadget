arch=arm
baudrate=115200
boot_a_script=load ${devtype} ${devnum}:${bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}
boot_extlinux=sysboot ${devtype} ${devnum}:${bootpart} any ${scriptaddr} ${prefix}extlinux/extlinux.conf
boot_prefixes=/ /boot/
boot_script_dhcp=boot.scr.uimg
boot_scripts=boot.scr.uimg boot.scr
boot_targets=mmc0 usb0 pxe dhcp 
bootcmd=run distro_bootcmd
bootcmd_dhcp=usb start; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi
bootcmd_mmc0=setenv devnum 0; run mmc_boot
bootcmd_pxe=usb start; dhcp; if pxe get; then pxe boot; fi
bootcmd_usb0=setenv devnum 0; run usb_boot
bootdelay=2
bootenv=uEnv.txt
cpu=armv7
devnum=0
devtype=mmc
dhcpuboot=usb start; dhcp u-boot.uimg; bootm
distro_bootcmd=for target in ${boot_targets}; do run bootcmd_${target}; done
fdt_addr_r=0x00000100
fdt_high=0xffffffff
fdtaddr=0x02000000
fdtfile=bcm2709-rpi-2-b.dtb
filesize=1c5
importbootenv=echo Importing environment from mmc ...; env import -t -r $loadaddr $filesize
initrd_addr=0x02100000
initrd_file=initrd.img
initrd_high=0xffffffff
kernel_addr_r=0x01000000
kernel_file=kernel.img
loadaddr=0x00200000
loadbootenv=echo LOADBOOTENV; load ${devtype} ${devnum} ${loadaddr} ${bootenv}
loadfdt=fdt addr 0x02000000; fdt get value args /chosen bootargs
loadfiles=run loadkernel; run loadinitrd; run loadpsplash; run loadfdt
loadinitrd=load mmc ${mmcdev}:${mmcpart} ${initrd_addr} ${snap_kernel}/${initrd_file}; setenv initrd_size ${filesize}
loadkernel=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${snap_kernel}/${kernel_file}
loadpsplash=if test -e mmc ${mmcdev}:${mmcpart} ${psplash_file}; then setexpr psplash_addr ${initrd_addr} + ${initrd_size}; load mmc ${mmcdev}:${mmcpart} ${psplash_addr} ${psplash_file}; setenv psplash_size ${filesize}; setexpr initrd_size ${initrd_size} + ${psplash_size}; fi
mmc_boot=run loadfdt; if mmc dev ${devnum}; then setenv devtype mmc; if run loadbootenv; then echo Loaded environment from ${bootenv}; run importbootenv; fi; if test -n "$uenvcmd"; then echo Running uenvcmd ...; run uenvcmd; fi; run scan_dev_for_boot_part; fi
mmcargs=setenv bootargs "${args} root=${mmcroot}"
mmcdev=0
mmcpart=1
mmcrootfstype=ext4
psplash_file=psplash.img
pxefile_addr_r=0x00100000
ramdisk_addr_r=0x02100000
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done
scan_dev_for_boot_part=part list ${devtype} ${devnum} devplist; for bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${bootpart} bootfstype; then run scan_dev_for_boot; fi; done
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${bootpart} ${prefix}extlinux/extlinux.conf; then echo Found ${prefix}extlinux/extlinux.conf; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
scriptaddr=0x00000000
snappy_boot=if test "${snap_mode}" = "try"; then setenv snap_mode "trying"; saveenv; if test "${snap_try_core}" != ""; then setenv snap_core "${snap_try_core}"; fi; if test "${snap_try_kernel}" != ""; then setenv snap_kernel "${snap_try_kernel}"; fi; elif test "${snap_mode}" = "trying"; then setenv snap_mode ""; saveenv; fi; run loadfiles; setenv mmcroot "/dev/disk/by-label/writable ${snappy_cmdline} snap_core=${snap_core} snap_kernel=${snap_kernel}"; run mmcargs; bootz ${loadaddr} ${initrd_addr}:${initrd_size} 0x02000000
snappy_cmdline=net.ifnames=0 init=/lib/systemd/systemd ro panic=-1 fixrtc
snappy_mode=
soc=bcm2835
stderr=serial
stdin=serial
stdout=serial
uenvcmd=echo ENVCMD; run snappy_boot
usb_boot=usb start; if usb dev ${devnum}; then setenv devtype usb; run scan_dev_for_boot_part; fi
vendor=raspberrypi
